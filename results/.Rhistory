"/home/probst/Random_Forest/RFSplitbias/results/datasetsinfo.RData"
load(paste0(dir, "/results/datasetsinfo.RData"))
head(datasetsinfo)
datasetsinfo$nclass == 2
datasetsinfo$nclass
datasetsinfo[,2]
datasetsinfo[,2] == 2
which(datasetsinfo[,2] == 2)
res = res[which(datasetsinfo[,2] == 2)]
showStatus(regis)
res_compr = list()
colMeans(res[[i]][[3]])
res[[1]]
datasetsinfo
length(res)
res = loadResults(regis)
which(datasetsinfo[,2] == 2)
res = res[which(datasetsinfo[,2] == 2)]
res = loadResults(regis)
datasetsinf[datasetsinfo[,2] == 2,1]
datasetsinfo[datasetsinfo[,2] == 2,1]
datasetsinfo[,2] == 2
datasetsinfo[which(datasetsinfo[,2] == 2),1]
ids_bin = datasetsinfo[which(datasetsinfo[,2] == 2),1]
sapply(res, "[[", 1)
res[[1]]
sapply(res, "[[", 1)
sapply(res, "[[", 1) %in% ids_bin
res_bin = res[which(sapply(res, "[[", 1) %in% ids_bin)]
res_compr = list()
for(i in 1:length(res_bin))
res_compr[i] = colMeans(res_bin[[i]][[3]])
warnings()
res_compr = list()
for(i in 1:length(res_bin))
res_compr[[i]] = colMeans(res_bin[[i]][[3]])
res_compr[[i]]
sapply(res, "[[", 1)
sapply(res, "[[", 2)
sapply(res, "[[", 2)[2,]
sapply(res, "[[", 2)[2,] == "max"
sapply(res_bin, "[[", 2)[2,] == "max")
sapply(res_bin, "[[", 2)[2,] == "max"
res_bin[sapply(res_bin, "[[", 2)[2,] == "max"]
res_compr[sapply(res_bin, "[[", 2)[2,] == "max"]
unlist(res_compr[sapply(res_bin, "[[", 2)[2,] == "max"])
data.frame(res_compr[sapply(res_bin, "[[", 2)[2,] == "max"])
as.data.frame(res_compr[sapply(res_bin, "[[", 2)[2,] == "max"])
do.call(res_compr[sapply(res_bin, "[[", 2)[2,] == "max"], rbind)
do.call(rbind, res_compr[sapply(res_bin, "[[", 2)[2,] == "max"])
plot(do.call(rbind, res_compr[sapply(res_bin, "[[", 2)[2,] == "max"])[,2]
plot(do.call(rbind, res_compr[sapply(res_bin, "[[", 2)[2,] == "max"])[,2])
plot(do.call(rbind, res_compr[sapply(res_bin, "[[", 2)[2,] == "max"])[,2])
boxplot(do.call(rbind, res_compr[sapply(res_bin, "[[", 2)[2,] == "max"])[,2])
?boxplot
boxplot(do.call(rbind, res_compr[sapply(res_bin, "[[", 2)[2,] == "max"])[,7])
sapply(res_bin, "[[", 2)[2,]
boxplot(do.call(rbind, res_compr[sapply(res_bin, "[[", 2)[2,] == "quad"])[,7],
do.call(rbind, res_compr[sapply(res_bin, "[[", 2)[2,] == "max"])[,7],
do.call(rbind, res_compr[sapply(res_bin, "[[", 2)[2,] == ""])[,7])
mean(do.call(rbind, res_compr[sapply(res_bin, "[[", 2)[2,] == "quad"])[,7])
mean(do.call(rbind, res_compr[sapply(res_bin, "[[", 2)[2,] == "max"])[,7])
mean(do.call(rbind, res_compr[sapply(res_bin, "[[", 2)[2,] == ""])[,7])
res
res[800:808]
res[800:804]
res[800:803]
mean(do.call(rbind, res_compr[sapply(res_bin, "[[", 2)[2,] == "quad"])[,7])
mean(do.call(rbind, res_compr[sapply(res_bin, "[[", 2)[2,] == "max"])[,7])
mean(do.call(rbind, res_compr[sapply(res_bin, "[[", 2)[2,] == ""])[,7])
for(i in 2:7){
mean(do.call(rbind, res_compr[sapply(res_bin, "[[", 2)[2,] == "quad"])[,7])
}
print(mean(do.call(rbind, res_compr[sapply(res_bin, "[[", 2)[2,] == "quad"])[,7]),
mean(do.call(rbind, res_compr[sapply(res_bin, "[[", 2)[2,] == "max"])[,7]),
mean(do.call(rbind, res_compr[sapply(res_bin, "[[", 2)[2,] == ""])[,7]))
print(c(mean(do.call(rbind, res_compr[sapply(res_bin, "[[", 2)[2,] == "quad"])[,7]),
mean(do.call(rbind, res_compr[sapply(res_bin, "[[", 2)[2,] == "max"])[,7]),
mean(do.call(rbind, res_compr[sapply(res_bin, "[[", 2)[2,] == ""])[,7])))
res_bin[1]
colnames(res_bin[1]$result)
res_bin[1]$result
colnames(res_bin[[1]]$result)
?boxplot
boxplot(do.call(rbind, res_compr[sapply(res_bin, "[[", 2)[2,] == "quad"])[,i],
do.call(rbind, res_compr[sapply(res_bin, "[[", 2)[2,] == "max"])[,i],
do.call(rbind, res_compr[sapply(res_bin, "[[", 2)[2,] == ""])[,i],
main = colnames(res_bin[[1]]$result)[i], names = "party_quad", "party_max", "rf")
i
colnames(res_bin[[1]]$result)[i]
boxplot(do.call(rbind, res_compr[sapply(res_bin, "[[", 2)[2,] == "quad"])[,i],
do.call(rbind, res_compr[sapply(res_bin, "[[", 2)[2,] == "max"])[,i],
do.call(rbind, res_compr[sapply(res_bin, "[[", 2)[2,] == ""])[,i]
)
boxplot(do.call(rbind, res_compr[sapply(res_bin, "[[", 2)[2,] == "quad"])[,i],
do.call(rbind, res_compr[sapply(res_bin, "[[", 2)[2,] == "max"])[,i],
do.call(rbind, res_compr[sapply(res_bin, "[[", 2)[2,] == ""])[,i],
main = colnames(res_bin[[1]]$result)[i], names = c("party_quad", "party_max", "rf"))
for(i in 2:7){
boxplot(do.call(rbind, res_compr[sapply(res_bin, "[[", 2)[2,] == "quad"])[,i],
do.call(rbind, res_compr[sapply(res_bin, "[[", 2)[2,] == "max"])[,i],
do.call(rbind, res_compr[sapply(res_bin, "[[", 2)[2,] == ""])[,i],
main = colnames(res_bin[[1]]$result)[i], names = c("party_quad", "party_max", "rf"))
print(colnames(res_bin[[1]]$result)[i])
print(c(mean(do.call(rbind, res_compr[sapply(res_bin, "[[", 2)[2,] == "quad"])[,i]),
mean(do.call(rbind, res_compr[sapply(res_bin, "[[", 2)[2,] == "max"])[,i]),
mean(do.call(rbind, res_compr[sapply(res_bin, "[[", 2)[2,] == ""])[,i])))
}
sapply(res, "[[", 1)
table(sapply(res, "[[", 1))
table(table(sapply(res, "[[", 1)))
table(table(sapply(res_bin, "[[", 1)))
showStatus(regis)
[which(is.na(datasetsinfo[,2]))
which(is.na(datasetsinfo[,2]))
which(datasetsinfo[,2] != 2)
ids = list()
ids[[1]] = datasetsinfo[which(datasetsinfo[,2] == 2), 1]
ids[[2]] = datasetsinfo[which(datasetsinfo[,2] != 2), 1]
ids[[3]] = datasetsinfo[which(is.na(datasetsinfo[,2])), 1]
names = c("bin", "multiclass", "regr")
for(j in 1:3){
print(names[j])
res_subset = res[which(sapply(res, "[[", 1) %in% ids[[j]])]
res_compr = list()
for(i in 1:length(res_subset))
res_compr[[i]] = colMeans(res_subset[[i]][[3]])
for(i in 2:7){
boxplot(do.call(rbind, res_compr[sapply(res_subset, "[[", 2)[2,] == "quad"])[,i],
do.call(rbind, res_compr[sapply(res_subset, "[[", 2)[2,] == "max"])[,i],
do.call(rbind, res_compr[sapply(res_subset, "[[", 2)[2,] == ""])[,i],
main = paste(colnames(res_subset[[1]]$result)[i], names[j]), names = c("party_quad", "party_max", "rf"))
print(colnames(res_subset[[1]]$result)[i])
print(c(mean(do.call(rbind, res_compr[sapply(res_subset, "[[", 2)[2,] == "quad"])[,i]),
mean(do.call(rbind, res_compr[sapply(res_subset, "[[", 2)[2,] == "max"])[,i]),
mean(do.call(rbind, res_compr[sapply(res_subset, "[[", 2)[2,] == ""])[,i])))
}
}
j = 3
print(names[j])
res_subset = res[which(sapply(res, "[[", 1) %in% ids[[j]])]
res_compr = list()
for(i in 1:length(res_subset))
res_compr[[i]] = colMeans(res_subset[[i]][[3]])
i = 2
boxplot(do.call(rbind, res_compr[sapply(res_subset, "[[", 2)[2,] == "quad"])[,i],
do.call(rbind, res_compr[sapply(res_subset, "[[", 2)[2,] == "max"])[,i],
do.call(rbind, res_compr[sapply(res_subset, "[[", 2)[2,] == ""])[,i],
main = paste(colnames(res_subset[[1]]$result)[i], names[j]), names = c("party_quad", "party_max", "rf"))
print(colnames(res_subset[[1]]$result)[i])
print(c(mean(do.call(rbind, res_compr[sapply(res_subset, "[[", 2)[2,] == "quad"])[,i]),
mean(do.call(rbind, res_compr[sapply(res_subset, "[[", 2)[2,] == "max"])[,i]),
mean(do.call(rbind, res_compr[sapply(res_subset, "[[", 2)[2,] == ""])[,i])))
j = 2
res_compr[sapply(res_subset, "[[", 2)[2,] == "quad"]
res_compr[[1]]
length(res_compr[[1]])
for(j in 1:3){
print(names[j])
res_subset = res[which(sapply(res, "[[", 1) %in% ids[[j]])]
res_compr = list()
for(i in 1:length(res_subset))
res_compr[[i]] = colMeans(res_subset[[i]][[3]])
for(i in 2:length(res_compr[[1]])){
boxplot(do.call(rbind, res_compr[sapply(res_subset, "[[", 2)[2,] == "quad"])[,i],
do.call(rbind, res_compr[sapply(res_subset, "[[", 2)[2,] == "max"])[,i],
do.call(rbind, res_compr[sapply(res_subset, "[[", 2)[2,] == ""])[,i],
main = paste(colnames(res_subset[[1]]$result)[i], names[j]), names = c("party_quad", "party_max", "rf"))
print(colnames(res_subset[[1]]$result)[i])
print(c(mean(do.call(rbind, res_compr[sapply(res_subset, "[[", 2)[2,] == "quad"])[,i]),
mean(do.call(rbind, res_compr[sapply(res_subset, "[[", 2)[2,] == "max"])[,i]),
mean(do.call(rbind, res_compr[sapply(res_subset, "[[", 2)[2,] == ""])[,i])))
}
}
sum(datasetsinfo[,2] == 2)
sum(datasetsinfo[,2] == 2, na.rm=T)
sum(datasetsinfo[,2] != 2, na.rm=T)
sum(is.na(datasetsinfo[,2]))
showStatus(regis)
showStatus(regis)
showStatus(regis)
res = loadResults(regis)
# globale Ergebnisse
ids = list()
ids[[1]] = datasetsinfo[which(datasetsinfo[,2] == 2), 1]
ids[[2]] = datasetsinfo[which(datasetsinfo[,2] != 2), 1]
ids[[3]] = datasetsinfo[which(is.na(datasetsinfo[,2])), 1]
sum(datasetsinfo[,2] == 2, na.rm=T) # 111 binary
sum(datasetsinfo[,2] != 2, na.rm=T) # 39 multiclass
sum(is.na(datasetsinfo[,2])) # 111 regression
names = c("bin", "multiclass", "regr")
for(j in 1:3){
print(names[j])
res_subset = res[which(sapply(res, "[[", 1) %in% ids[[j]])]
res_compr = list()
for(i in 1:length(res_subset))
res_compr[[i]] = colMeans(res_subset[[i]][[3]])
for(i in 2:length(res_compr[[1]])){
boxplot(do.call(rbind, res_compr[sapply(res_subset, "[[", 2)[2,] == "quad"])[,i],
do.call(rbind, res_compr[sapply(res_subset, "[[", 2)[2,] == "max"])[,i],
do.call(rbind, res_compr[sapply(res_subset, "[[", 2)[2,] == ""])[,i],
main = paste(colnames(res_subset[[1]]$result)[i], names[j]), names = c("party_quad", "party_max", "rf"))
print(colnames(res_subset[[1]]$result)[i])
print(c(mean(do.call(rbind, res_compr[sapply(res_subset, "[[", 2)[2,] == "quad"])[,i]),
mean(do.call(rbind, res_compr[sapply(res_subset, "[[", 2)[2,] == "max"])[,i]),
mean(do.call(rbind, res_compr[sapply(res_subset, "[[", 2)[2,] == ""])[,i])))
}
}
do.call(rbind, res_compr[sapply(res_subset, "[[", 2)[2,] == "quad"])[,i]
erg = cbind(do.call(rbind, res_compr[sapply(res_subset, "[[", 2)[2,] == "quad"])[,i],
do.call(rbind, res_compr[sapply(res_subset, "[[", 2)[2,] == "max"])[,i],
do.call(rbind, res_compr[sapply(res_subset, "[[", 2)[2,] == ""])[,i])
do.call(rbind, res_compr[sapply(res_subset, "[[", 2)[2,] == "quad"])[,i]
do.call(rbind, res_compr[sapply(res_subset, "[[", 2)[2,] == "max"])[,i]
do.call(rbind, res_compr[sapply(res_subset, "[[", 2)[2,] == ""])[,i]
sapply(res, "[[", 1)
sapply(res, "[[", 1)
table(sapply(res, "[[", 1))
table(sapply(res, "[[", 1)) == 3
table(sapply(res, "[[", 1))[table(sapply(res, "[[", 1)) == 3]
names(table(sapply(res, "[[", 1)))[table(sapply(res, "[[", 1)) == 3]
sapply(res, "[[", 1)
sapply(res, "[[", 1) %in% names(table(sapply(res, "[[", 1)))[table(sapply(res, "[[", 1)) == 3]
res = loadResults(regis)
res = res[sapply(res, "[[", 1) %in% names(table(sapply(res, "[[", 1)))[table(sapply(res, "[[", 1)) == 3]]
ids = list()
ids[[1]] = datasetsinfo[which(datasetsinfo[,2] == 2), 1]
ids[[2]] = datasetsinfo[which(datasetsinfo[,2] != 2), 1]
ids[[3]] = datasetsinfo[which(is.na(datasetsinfo[,2])), 1]
sum(datasetsinfo[,2] == 2, na.rm=T) # 111 binary
sum(datasetsinfo[,2] != 2, na.rm=T) # 39 multiclass
sum(is.na(datasetsinfo[,2])) # 111 regression
names = c("bin", "multiclass", "regr")
for(j in 1:3){
print(names[j])
res_subset = res[which(sapply(res, "[[", 1) %in% ids[[j]])]
res_compr = list()
for(i in 1:length(res_subset))
res_compr[[i]] = colMeans(res_subset[[i]][[3]])
for(i in 2:length(res_compr[[1]])){
erg = cbind(do.call(rbind, res_compr[sapply(res_subset, "[[", 2)[2,] == "quad"])[,i],
do.call(rbind, res_compr[sapply(res_subset, "[[", 2)[2,] == "max"])[,i],
do.call(rbind, res_compr[sapply(res_subset, "[[", 2)[2,] == ""])[,i])
boxplot(do.call(rbind, res_compr[sapply(res_subset, "[[", 2)[2,] == "quad"])[,i],
do.call(rbind, res_compr[sapply(res_subset, "[[", 2)[2,] == "max"])[,i],
do.call(rbind, res_compr[sapply(res_subset, "[[", 2)[2,] == ""])[,i],
main = paste(colnames(res_subset[[1]]$result)[i], names[j]), names = c("party_quad", "party_max", "rf"))
print(colnames(res_subset[[1]]$result)[i])
print(c(mean(do.call(rbind, res_compr[sapply(res_subset, "[[", 2)[2,] == "quad"])[,i]),
mean(do.call(rbind, res_compr[sapply(res_subset, "[[", 2)[2,] == "max"])[,i]),
mean(do.call(rbind, res_compr[sapply(res_subset, "[[", 2)[2,] == ""])[,i])))
}
}
erg
sapply(erg, order)
apply(erg, 2, order)
apply(erg, 1, order)
rowMeans(apply(erg, 1, order))
for(j in 1:3){
print(names[j])
res_subset = res[which(sapply(res, "[[", 1) %in% ids[[j]])]
res_compr = list()
for(i in 1:length(res_subset))
res_compr[[i]] = colMeans(res_subset[[i]][[3]])
for(i in 2:length(res_compr[[1]])){
erg = cbind(do.call(rbind, res_compr[sapply(res_subset, "[[", 2)[2,] == "quad"])[,i],
do.call(rbind, res_compr[sapply(res_subset, "[[", 2)[2,] == "max"])[,i],
do.call(rbind, res_compr[sapply(res_subset, "[[", 2)[2,] == ""])[,i])
boxplot(do.call(rbind, res_compr[sapply(res_subset, "[[", 2)[2,] == "quad"])[,i],
do.call(rbind, res_compr[sapply(res_subset, "[[", 2)[2,] == "max"])[,i],
do.call(rbind, res_compr[sapply(res_subset, "[[", 2)[2,] == ""])[,i],
main = paste(colnames(res_subset[[1]]$result)[i], names[j]), names = c("party_quad", "party_max", "rf"))
print(colnames(res_subset[[1]]$result)[i])
print(c(mean(do.call(rbind, res_compr[sapply(res_subset, "[[", 2)[2,] == "quad"])[,i]),
mean(do.call(rbind, res_compr[sapply(res_subset, "[[", 2)[2,] == "max"])[,i]),
mean(do.call(rbind, res_compr[sapply(res_subset, "[[", 2)[2,] == ""])[,i])))
print(rowMeans(apply(erg, 1, order))) # durchschnittliches Ranking
}
}
?cforest
library(party)
?cforest
?cforest
for(j in 1:3){
print(names[j])
res_subset = res[which(sapply(res, "[[", 1) %in% ids[[j]])]
res_compr = list()
for(i in 1:length(res_subset))
res_compr[[i]] = colMeans(res_subset[[i]][[3]])
for(i in 2:length(res_compr[[1]])){
erg = cbind(do.call(rbind, res_compr[sapply(res_subset, "[[", 2)[2,] == "quad"])[,i],
do.call(rbind, res_compr[sapply(res_subset, "[[", 2)[2,] == "max"])[,i],
do.call(rbind, res_compr[sapply(res_subset, "[[", 2)[2,] == ""])[,i])
boxplot(do.call(rbind, res_compr[sapply(res_subset, "[[", 2)[2,] == "quad"])[,i],
do.call(rbind, res_compr[sapply(res_subset, "[[", 2)[2,] == "max"])[,i],
do.call(rbind, res_compr[sapply(res_subset, "[[", 2)[2,] == ""])[,i],
main = paste(colnames(res_subset[[1]]$result)[i], names[j]), names = c("party_quad", "party_max", "rf"))
print(colnames(res_subset[[1]]$result)[i])
print(c(mean(do.call(rbind, res_compr[sapply(res_subset, "[[", 2)[2,] == "quad"])[,i]),
mean(do.call(rbind, res_compr[sapply(res_subset, "[[", 2)[2,] == "max"])[,i]),
mean(do.call(rbind, res_compr[sapply(res_subset, "[[", 2)[2,] == ""])[,i])))
print(rowMeans(apply(erg, 1, order))) # durchschnittliches Ranking
}
}
order(c(1,4,2))
res = loadResults(regis)
# globale Ergebnisse
ids = list()
ids[[1]] = datasetsinfo[which(datasetsinfo[,2] == 2), 1]
ids[[2]] = datasetsinfo[which(datasetsinfo[,2] != 2), 1]
ids[[3]] = datasetsinfo[which(is.na(datasetsinfo[,2])), 1]
sum(datasetsinfo[,2] == 2, na.rm=T) # 111 binary
sum(datasetsinfo[,2] != 2, na.rm=T) # 39 multiclass
sum(is.na(datasetsinfo[,2])) # 111 regression
names = c("bin", "multiclass", "regr")
for(j in 1:3){
print(names[j])
res_subset = res[which(sapply(res, "[[", 1) %in% ids[[j]])]
# nur Ergebnisse verwenden, bei denen bei allen drei Methoden keine Fehler auftraten
res_subset = res_subset[sapply(res_subset, "[[", 1) %in% names(table(sapply(res_subset, "[[", 1)))[table(sapply(res_subset, "[[", 1)) == 3]]
res_compr = list()
for(i in 1:length(res_subset))
res_compr[[i]] = colMeans(res_subset[[i]][[3]])
for(i in 2:length(res_compr[[1]])){
erg = cbind(do.call(rbind, res_compr[sapply(res_subset, "[[", 2)[2,] == "quad"])[,i],
do.call(rbind, res_compr[sapply(res_subset, "[[", 2)[2,] == "max"])[,i],
do.call(rbind, res_compr[sapply(res_subset, "[[", 2)[2,] == ""])[,i])
boxplot(do.call(rbind, res_compr[sapply(res_subset, "[[", 2)[2,] == "quad"])[,i],
do.call(rbind, res_compr[sapply(res_subset, "[[", 2)[2,] == "max"])[,i],
do.call(rbind, res_compr[sapply(res_subset, "[[", 2)[2,] == ""])[,i],
main = paste(colnames(res_subset[[1]]$result)[i], names[j]), names = c("party_quad", "party_max", "rf"))
print(colnames(res_subset[[1]]$result)[i])
print(c(mean(do.call(rbind, res_compr[sapply(res_subset, "[[", 2)[2,] == "quad"])[,i]),
mean(do.call(rbind, res_compr[sapply(res_subset, "[[", 2)[2,] == "max"])[,i]),
mean(do.call(rbind, res_compr[sapply(res_subset, "[[", 2)[2,] == ""])[,i])))
print(rowMeans(apply(erg, 1, order))) # durchschnittliches Ranking
}
}
erg
rowMeans(erg)
colMeans(erg)
print(c(mean(do.call(rbind, res_compr[sapply(res_subset, "[[", 2)[2,] == "quad"])[,i]),
mean(do.call(rbind, res_compr[sapply(res_subset, "[[", 2)[2,] == "max"])[,i]),
mean(do.call(rbind, res_compr[sapply(res_subset, "[[", 2)[2,] == ""])[,i])))
print(colnames(res_subset[[1]]$result)[i])
colMeans(erg)
rowMeans(apply(erg, 1, order))
apply(erg, 1, order)
erg
round(erg)
apply(erg, 1, order)
order(1,3,4)
order(c(1,3,4))
order(c(1,1,4))
?order
rank(c(1,1,4))
for(j in 1:3){
print(names[j])
res_subset = res[which(sapply(res, "[[", 1) %in% ids[[j]])]
# nur Ergebnisse verwenden, bei denen bei allen drei Methoden keine Fehler auftraten
res_subset = res_subset[sapply(res_subset, "[[", 1) %in% names(table(sapply(res_subset, "[[", 1)))[table(sapply(res_subset, "[[", 1)) == 3]]
res_compr = list()
for(i in 1:length(res_subset))
res_compr[[i]] = colMeans(res_subset[[i]][[3]])
for(i in 2:length(res_compr[[1]])){
erg = cbind(do.call(rbind, res_compr[sapply(res_subset, "[[", 2)[2,] == "quad"])[,i],
do.call(rbind, res_compr[sapply(res_subset, "[[", 2)[2,] == "max"])[,i],
do.call(rbind, res_compr[sapply(res_subset, "[[", 2)[2,] == ""])[,i])
boxplot(do.call(rbind, res_compr[sapply(res_subset, "[[", 2)[2,] == "quad"])[,i],
do.call(rbind, res_compr[sapply(res_subset, "[[", 2)[2,] == "max"])[,i],
do.call(rbind, res_compr[sapply(res_subset, "[[", 2)[2,] == ""])[,i],
main = paste(colnames(res_subset[[1]]$result)[i], names[j]), names = c("party_quad", "party_max", "rf"))
print(colnames(res_subset[[1]]$result)[i])
print(colMeans(erg))
print(rowMeans(apply(erg, 1, rank))) # durchschnittliches Ranking
}
}
showStatus(regis)
showStatus(regis)
showStatus(regis)
lrn = makeLearner("regr.cforest")
getParamSet(lrn)
?cforest
showStatus(regis)
library("BatchExperiments")
dir = "/home/probst/Random_Forest/RFSplitbias"
load(paste0(dir, "/results/datasetsinfo.RData"))
regis = loadRegistry(paste0(dir, "/results/Splitbias-files"))
res = loadResults(regis)
# globale Ergebnisse
ids = list()
ids[[1]] = datasetsinfo[which(datasetsinfo[,2] == 2), 1]
ids[[2]] = datasetsinfo[which(datasetsinfo[,2] != 2), 1]
ids[[3]] = datasetsinfo[which(is.na(datasetsinfo[,2])), 1]
sum(datasetsinfo[,2] == 2, na.rm=T) # 111 binary
sum(datasetsinfo[,2] != 2, na.rm=T) # 39 multiclass
sum(is.na(datasetsinfo[,2])) # 111 regression
names = c("bin", "multiclass", "regr")
for(j in 1:3){
print(names[j])
res_subset = res[which(sapply(res, "[[", 1) %in% ids[[j]])]
# nur Ergebnisse verwenden, bei denen bei allen drei Methoden keine Fehler auftraten
res_subset = res_subset[sapply(res_subset, "[[", 1) %in% names(table(sapply(res_subset, "[[", 1)))[table(sapply(res_subset, "[[", 1)) == 3]]
res_compr = list()
for(i in 1:length(res_subset))
res_compr[[i]] = colMeans(res_subset[[i]][[3]])
for(i in 2:length(res_compr[[1]])){
erg = cbind(do.call(rbind, res_compr[sapply(res_subset, "[[", 2)[2,] == "quad"])[,i],
do.call(rbind, res_compr[sapply(res_subset, "[[", 2)[2,] == "max"])[,i],
do.call(rbind, res_compr[sapply(res_subset, "[[", 2)[2,] == ""])[,i])
boxplot(do.call(rbind, res_compr[sapply(res_subset, "[[", 2)[2,] == "quad"])[,i],
do.call(rbind, res_compr[sapply(res_subset, "[[", 2)[2,] == "max"])[,i],
do.call(rbind, res_compr[sapply(res_subset, "[[", 2)[2,] == ""])[,i],
main = paste(colnames(res_subset[[1]]$result)[i], names[j]), names = c("party_quad", "party_max", "rf"))
print(colnames(res_subset[[1]]$result)[i])
print(colMeans(erg))
print(rowMeans(apply(erg, 1, rank))) # durchschnittliches Ranking
}
}
library("BatchExperiments")
dir = "/home/probst/Random_Forest/RFSplitbias"
load(paste0(dir, "/results/datasetsinfo.RData"))
regis = loadRegistry(paste0(dir, "/results/Splitbias-files"))
res = loadResults(regis)
# globale Ergebnisse
ids = list()
ids[[1]] = datasetsinfo[which(datasetsinfo[,2] == 2), 1]
ids[[2]] = datasetsinfo[which(datasetsinfo[,2] != 2), 1]
ids[[3]] = datasetsinfo[which(is.na(datasetsinfo[,2])), 1]
sum(datasetsinfo[,2] == 2, na.rm=T) # 111 binary
sum(datasetsinfo[,2] != 2, na.rm=T) # 39 multiclass
sum(is.na(datasetsinfo[,2])) # 111 regression
names = c("bin", "multiclass", "regr")
for(j in 1:3){
print(names[j])
res_subset = res[which(sapply(res, "[[", 1) %in% ids[[j]])]
# nur Ergebnisse verwenden, bei denen bei allen drei Methoden keine Fehler auftraten
res_subset = res_subset[sapply(res_subset, "[[", 1) %in% names(table(sapply(res_subset, "[[", 1)))[table(sapply(res_subset, "[[", 1)) == 3]]
res_compr = list()
for(i in 1:length(res_subset))
res_compr[[i]] = colMeans(res_subset[[i]][[3]])
for(i in 2:length(res_compr[[1]])){
erg = cbind(do.call(rbind, res_compr[sapply(res_subset, "[[", 2)[2,] == "quad"])[,i],
do.call(rbind, res_compr[sapply(res_subset, "[[", 2)[2,] == "max"])[,i],
do.call(rbind, res_compr[sapply(res_subset, "[[", 2)[2,] == ""])[,i])
boxplot(do.call(rbind, res_compr[sapply(res_subset, "[[", 2)[2,] == "quad"])[,i],
do.call(rbind, res_compr[sapply(res_subset, "[[", 2)[2,] == "max"])[,i],
do.call(rbind, res_compr[sapply(res_subset, "[[", 2)[2,] == ""])[,i],
main = paste(colnames(res_subset[[1]]$result)[i], names[j]), names = c("party_quad", "party_max", "rf"))
print(colnames(res_subset[[1]]$result)[i])
print(colMeans(erg))
print(rowMeans(apply(erg, 1, rank))) # durchschnittliches Ranking
}
}
getParamSet(lrn)
qnorm(0.9)
plot(airct)
?ctree
airq <- subset(airquality, !is.na(Ozone))
airct <- ctree(Ozone ~ ., data = airq,
controls = ctree_control(maxsurrogate = 3))
plot(airct)
airq <- subset(airquality, !is.na(Ozone))
airct <- ctree(Ozone ~ ., data = airq,
controls = ctree_control(maxsurrogate = 3, mincriterion = 0))
plot(airct)
airct <- ctree(Ozone ~ ., data = airq,
controls = ctree_control(maxsurrogate = 3, mincriterion = -1))
plot(airct)
airct <- ctree(Ozone ~ ., data = airq,
controls = ctree_control(maxsurrogate = 3, mincriterion = 0))
plot(airct)
airct <- ctree(Ozone ~ ., data = airq,
controls = ctree_control(maxsurrogate = 3, mincriterion = 1))
plot(airct)
airct <- ctree(Ozone ~ ., data = airq,
controls = ctree_control(maxsurrogate = 3, mincriterion = 0))
plot(airct)
airct <- ctree(Ozone ~ ., data = airq,
controls = ctree_control(teststat = "quad", testtype = "Univariate", maxsurrogate = 3, mincriterion = 0))
plot(airct)
airct <- ctree(Ozone ~ ., data = airq,
controls = ctree_control(teststat = "quad", testtype = "Univariate", maxsurrogate = 3, mincriterion = 1))
plot(airct)
airct <- ctree(Ozone ~ ., data = airq,
controls = ctree_control(teststat = "quad", testtype = "Univariate", maxsurrogate = 3, mincriterion = 0.6))
plot(airct)
airct <- ctree(Ozone ~ ., data = airq,
controls = ctree_control(teststat = "quad", testtype = "Univariate", maxsurrogate = 3, mincriterion = 0.2))
plot(airct)
airct <- ctree(Ozone ~ ., data = airq,
controls = ctree_control(teststat = "quad", testtype = "Univariate", maxsurrogate = 3, mincriterion = 0.99))
plot(airct)
airct <- ctree(Ozone ~ ., data = airq,
controls = ctree_control(teststat = "quad", testtype = "Univariate", maxsurrogate = 3, mincriterion = 0))
plot(airct)
airct <- ctree(Ozone ~ ., data = airq,
controls = ctree_control(teststat = "quad", testtype = "Univariate", maxsurrogate = 3, mincriterion = -1))
plot(airct)
airct <- ctree(Ozone ~ ., data = airq,
controls = ctree_control(teststat = "quad", testtype = "Univariate", maxsurrogate = 3, mincriterion = 0))
plot(airct)
airct <- ctree(Ozone ~ ., data = airq,
controls = ctree_control(teststat = "max", testtype = "Teststatistic", maxsurrogate = 3, mincriterion = 0))
plot(airct)
?ctree
airct <- ctree(Ozone ~ ., data = airq,
controls = ctree_control(teststat = "max", testtype = "Teststatistic", maxsurrogate = 3, mincriterion = 0.99))
plot(airct)
airct <- ctree(Ozone ~ ., data = airq,
controls = ctree_control(teststat = "max", testtype = "Teststatistic", maxsurrogate = 3, mincriterion = 2))
plot(airct)
